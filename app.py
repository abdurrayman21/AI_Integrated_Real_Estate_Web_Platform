# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iobYB0uyts_5B5swXuHrCbskzPANWnPq
"""

import gradio as gr
import pandas as pd
import joblib
import shap
import folium
from folium.plugins import MarkerCluster
import sqlite3
import os
import openai
import uuid
import numpy as np
import base64 # Import for Base64 encoding/decoding

# --- Configuration and Constants ---
try:
    # UPDATED FOR HUGGING FACE SPACES DEPLOYMENT:
    # Assume model file is in the same directory as the app.py script.
    model_path = "best_house_price_model.pkl"

    model = None # This will now be the full pipeline

    if os.path.exists(model_path):
        model = joblib.load(model_path)
        print(f"Full Model Pipeline loaded successfully from: {model_path}")
        # Verify that the loaded model is indeed a pipeline
        if isinstance(model, (joblib.parallel.Parallel, joblib.memory.Memory)):
            print("Detected Parallel object directly. This indicates a pipeline containing a model with n_jobs=-1. Ensure the top-level object is a sklearn.pipeline.Pipeline.")
        elif hasattr(model, 'steps') and isinstance(model.steps, list):
            print(f"Model is a Pipeline with steps: {[name for name, _ in model.steps]}")
        else:
            print("Warning: Loaded model is not a sklearn Pipeline object as expected. Prediction might fail.")
    else:
        print(f"ERROR: Model file not found at '{model_path}'. Prediction functionality will be disabled.")
        model = None # Ensure model is None if file not found

    if model is None: # Only check for model now
        print("Prediction functionality will be disabled due to missing model.")

except Exception as e:
    print(f"Error loading model pipeline: {e}")
    print("Prediction functionality will be disabled.")
    model = None

# shap.initjs() # This might cause issues in Gradio's server environment, remove if not actively displaying SHAP plots in the UI.
MARLA_TO_SQFT = 272.251

# Predefined coordinates for map functionality (simulated geocoding) - KEPT FOR REFERENCE, BUT MAP FUNCTIONS ARE REMOVED
PREDEFINED_COORDS = {
    "Islamabad": {"center": [33.6844, 73.0479], "G-10": [33.66, 73.02], "G-11": [33.65, 73.03], "F-8": [33.70, 73.03], "F-10": [33.68, 73.05], "E-11": [33.72, 72.97], "DHA-Islamabad": [33.58, 73.15]},
    "Karachi": {"center": [24.8607, 67.0011], "DHA": [24.80, 67.03], "Clifton": [24.81, 67.02], "Gulshan-e-Iqbal": [24.91, 67.07], "Bahria Town Karachi": [25.04, 67.36], "Malir Cantt": [24.93, 67.24]},
    "Lahore": {"center": [31.5498, 74.3436], "DHA": [31.47, 74.43], "Bahria Town": [31.39, 74.19], "Johar Town": [31.47, 74.25], "Cantt": [31.52, 74.39], "Gulberg": [31.52, 74.34], "Model Town": [31.47, 74.31]},
    "Faisalabad": {"center": [31.4180, 73.0782], "Madina Town": [31.40, 73.09], "Canal Road": [31.39, 73.05], "Dijkot": [31.27, 73.04], "Sargodha Road": [31.42, 73.15]},
    "Rawalpindi": {"center": [33.6007, 73.0679], "Saddar": [33.60, 73.05], "Bahria Town": [33.51, 73.08], "Gulraiz": [33.56, 73.08], "Defence Road": [33.52, 73.04]}
}

# These lists are now primarily for dropdown choices, the preprocessor will handle encoding
cities = ["Islamabad", "Karachi", "Lahore", "Faisalabad", "Rawalpindi"]
locations = {
    "Islamabad": ["G-10", "G-11", "F-8", "F-10", "E-11", "DHA-Islamabad"],
    "Karachi": ["DHA", "Clifton", "Gulshan-e-Iqbal", "Bahria Town Karachi", "Malir Cantt"],
    "Lahore": ["DHA", "Bahria Town", "Johar Town", "Cantt", "Gulberg", "Model Town"],
    "Faisalabad": ["Madina Town", "Canal Road", "Dijkot", "Sargodha Road"],
    "Rawalpindi": ["Saddar", "Bahria Town", "Gulraiz", "Defence Road"]
}
provinces = ["Punjab", "Sindh", "KPK", "Balochistan"]
property_types = ["Flat", "House", "Penthouse", "Lower Portion", "Upper Portion", "Farm House", "Commercial Plot"]
purposes = ["For Sale", "For Rent"]

DATABASE_NAME = "real_estate.db"

# --- Database Functions ---
def init_db():
    """Initializes the SQLite database and creates the properties table if it doesn't exist."""
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    # ADDED contact_name AND contact_number
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS properties (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            city TEXT NOT NULL,
            location TEXT NOT NULL,
            province TEXT NOT NULL,
            area REAL NOT NULL,
            unit TEXT NOT NULL,
            bedrooms INTEGER NOT NULL,
            baths INTEGER NOT NULL,
            property_type TEXT NOT NULL,
            purpose TEXT NOT NULL,
            description TEXT,
            images TEXT, -- This will now store Base64 encoded images
            price REAL,
            contact_name TEXT,
            contact_number TEXT,
            listed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

def add_property_to_db(city, location, province, area, unit, bedrooms, baths, property_type, purpose, description, images, price, contact_name, contact_number):
    """Adds a new property listing to the database."""
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    try:
        if not (isinstance(area, (int, float)) and area > 0):
            return "Error: Area must be a positive number.", "error"
        if not (isinstance(bedrooms, (int, float)) and bedrooms >= 0):
            return "Error: Bedrooms must be a non-negative number.", "error"
        if not (isinstance(baths, (int, float)) and baths >= 0):
            return "Error: Bathrooms must be a non-negative number.", "error"
        if not (isinstance(price, (int, float)) and price > 0):
            return "Error: Price must be a positive number.", "error"

        # --- Base64 Image Handling ---
        # We'll store only the first image as Base64 for simplicity.
        # If you need multiple, you'd store a comma-separated list of Base64 strings.
        image_b64 = None
        if images:
            # Gradio's gr.File with type="filepath" gives a temp path.
            # We read the file and encode it to Base64.
            first_image_file = images[0] # Assuming only one image for now for Base64 simplicity
            try:
                with open(first_image_file.name, 'rb') as f:
                    image_bytes = f.read()
                image_b64 = base64.b64encode(image_bytes).decode('utf-8')
                # Optional: get MIME type from Gradio File object
                mime_type = first_image_file.mime_type if hasattr(first_image_file, 'mime_type') else 'image/jpeg' # Default
                image_b64 = f"data:{mime_type};base64,{image_b64}" # Prepend data URI scheme
                print(f"Encoded image to Base64 (first few chars): {image_b64[:50]}...")
            except Exception as e:
                print(f"Error encoding image to Base64: {e}")
                image_b64 = None # Ensure it's None if encoding fails

        cursor.execute(
            "INSERT INTO properties (city, location, province, area, unit, bedrooms, baths, property_type, purpose, description, images, price, contact_name, contact_number) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
            (city, location, province, area, unit, bedrooms, baths, property_type, purpose, description, image_b64, price, contact_name, contact_number)
        )
        conn.commit()
        return "Property listed successfully!", "success"
    except Exception as e:
        print(f"Error listing property in DB: {e}")
        return f"Error listing property: {e}", "error"
    finally:
        conn.close()

def get_listed_properties():
    """Retrieves all properties from the database."""
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM properties ORDER BY listed_at DESC")
    properties = cursor.fetchall()
    conn.close()
    return properties

# --- Prediction Logic (Map functionality removed) ---
def get_input_df(city, location, province, area, unit, bedrooms, baths, property_type, purpose):
    """
    Converts input parameters into a raw DataFrame suitable for the *full pipeline*.
    """
    area_sqft = float(area) * MARLA_TO_SQFT if unit == "Marla" else float(area)

    # Create a raw DataFrame with all features, including categorical strings.
    # The pipeline's preprocessor step will handle their transformation.
    data = {
        'city': [city],
        'location': [location],
        'province_name': [province], # Corrected: 'province_name' to match model training
        'Total_Area': [area_sqft],
        'bedrooms': [int(bedrooms)],
        'baths': [int(baths)],
        'property_type': [property_type],
        'purpose': [purpose]
    }
    df = pd.DataFrame(data)

    # --- IMPORTANT DEBUGGING PRINTS ---
    print(f"\n--- Raw Input DataFrame for Pipeline Prediction ---")
    print(df.head())
    print(f"--- Raw Input DataFrame Columns and Shape ---")
    print(f"Columns: {df.columns.tolist()}")
    print(f"Shape: {df.shape}")
    # --- END DEBUGGING PRINTS ---

    return df

recent_predictions = []

def predict_price(city, location, province, area, unit, bedrooms, baths, property_type, purpose):
    """Handles property price prediction and returns formatted output."""
    if model is None: # Only check for the full model pipeline now
        return "<div class='feedback-message error'>Error: Prediction model not loaded. Please ensure paths are correct.</div>"

    if not (isinstance(area, (int, float)) and area > 0):
        return "<div class='feedback-message error'>Error: Area must be a positive number.</div>"
    if not (isinstance(bedrooms, (int, float)) and bedrooms >= 0):
        return "<div class='feedback-message error'>Error: Bedrooms must be a non-negative number.</div>"
    if not (isinstance(baths, (int, float)) and baths >= 0):
        return "<div class='feedback-message error'>Error: Bathrooms must be a non-negative number.</div>"

    try:
        # Get raw DataFrame with categorical strings
        df_raw = get_input_df(city, location, province, area, unit, bedrooms, baths, property_type, purpose)

        # Directly call .predict() on the 'model' (which is your full pipeline).
        # The pipeline will handle all necessary internal transformations (preprocessing).
        prediction = model.predict(df_raw)[0]

        print(f"Raw Prediction Value: {prediction}")

        recent_predictions.append({
            "City": city, "Location": location, "Province": province,
            "Area": f"{area} {unit}", "Bedrooms": bedrooms, "Bathrooms": baths,
            "Property Type": property_type, "Purpose": purpose,
            "Predicted Price": f"{round(prediction):,} PKR"
        })

        return f"<div class='feedback-message success'>Predicted Price: PKR {round(prediction):,}</div>"
    except Exception as e:
        import traceback
        traceback.print_exc() # Print full traceback for debugging
        print(f"Prediction Error: {e}")
        return f"<div class='feedback-message error'>Error during prediction: {str(e)}</div>"

def download_report():
    """Generates a CSV report of recent predictions."""
    if not recent_predictions:
        return None
    df = pd.DataFrame(recent_predictions)
    path = "recent_predictions.csv"
    df.to_csv(path, index=False)
    return path

# --- Chatbot Functions (GPT-4o Integration) ---
def chatbot_response(message, history):
    """Generates a response from the OpenAI GPT-4o chatbot."""
    # UPDATED FOR HUGGING FACE SPACES DEPLOYMENT:
    # Retrieve API key from environment variables for security.
    openai_api_key = os.getenv("OPENAI_API_KEY")

    if not openai_api_key:
        yield "Error: OpenAI API key not found. Please set the OPENAI_API_KEY environment variable in your Hugging Face Space settings."
        return

    client = openai.OpenAI(api_key=openai_api_key)

    if "property rate" in message.lower() or "price trend" in message.lower():
        yield "For general property rate estimates, please use the 'Price Prediction' tab. If you specify a city and area, I can give you an idea based on our model's capabilities."
        return

    if "crime" in message.lower() or "safety" in message.lower():
        yield "Specific, real-time crime statistics for local areas in Pakistan are hard to come by via public APIs. Generally, well-established residential societies tend to have better security. For official data, please consult government reports or local law enforcement agencies."
        return

    if "suitable property" in message.lower() or "recommendation" in message.lower() or "best area" in message.lower():
        yield "To provide a suitable property recommendation, tell me: Are you looking to buy or rent? What is your approximate budget? How many bedrooms and bathrooms do you need? Which cities or provinces are you considering?"
        return

    messages = [{"role": "system", "content": "You are a helpful AI assistant specializing in Pakistan real estate. Provide concise and relevant information. If asked about real-time prices or crime, acknowledge limitations and suggest using the prediction tab or official sources. Do not hallucinate data."}]

    for item in history:
        # ChatInterface history can be list of lists or list of dicts. Handle both.
        if isinstance(item, dict) and 'role' in item and 'content' in item:
            messages.append(item)
        elif isinstance(item, (list, tuple)) and len(item) == 2:
            messages.append({"role": "user", "content": item[0]})
            messages.append({"role": "assistant", "content": item[1]})

    messages.append({"role": "user", "content": message})

    try:
        stream = client.chat.completions.create(
            model="gpt-4o",
            messages=messages,
            stream=True,
            max_tokens=200,
            temperature=0.7,
        )
        full_response = ""
        for chunk in stream:
            if chunk.choices[0].delta.content is not None:
                full_response += chunk.choices[0].delta.content
                yield full_response
    except Exception as e:
        yield f"I'm sorry, I encountered an error with the AI: {e}"

# --- Gradio Interface Helper Functions ---
def update_locations(selected_city):
    """Updates the 'Location' dropdown choices based on the selected city."""
    return gr.update(choices=locations.get(selected_city, []), value=locations.get(selected_city, [""])[0])

def submit_property_listing(city, location, province, area, unit, bedrooms, baths, property_type, purpose, description, images, price, contact_name, contact_number):
    """Handles the submission of a new property listing."""
    message, msg_type = add_property_to_db(city, location, province, area, unit, bedrooms, baths, property_type, purpose, description, images, price, contact_name, contact_number)

    return (
        f"<div class='feedback-message {msg_type}'>{message}</div>",
        gr.update(value="Lahore"),
        gr.update(value=locations["Lahore"][0]),
        gr.update(value="Punjab"),
        gr.update(value=100), # Reset to default value
        gr.update(value="SqFt"),
        gr.update(value=3), # Reset to default value
        gr.update(value=2), # Reset to default value
        gr.update(value="House"), # Reset to default value
        gr.update(value="For Sale"), # Reset to default value
        gr.update(value=""),
        gr.update(value=None), # Clear uploaded files
        gr.update(value=10000000), # Reset to default value
        gr.update(value=""), # Reset contact_name
        gr.update(value="")  # Reset contact_number
    )

def load_all_properties_html():
    """Retrieves all properties from the database and formats them into HTML cards for display."""
    properties = get_listed_properties()
    if not properties:
        return "<p style='color:var(--text-muted); text-align:center; padding: 20px;'>No properties listed yet. Be the first to list one!</p>"

    html_output = "<div class='property-grid'>"
    for prop in properties:
        # UPDATED: Add contact_name and contact_number to the unpacked tuple
        prop_id, city, location, province, area, unit, bedrooms, baths, property_type, purpose, description, images_b64, price, contact_name, contact_number, listed_at = prop

        image_html = ""
        if images_b64:
            # images_b64 now directly holds the data URI string
            image_html = f"<img src='{images_b64}' alt='Property Image' style='width:100%; height:220px; object-fit:cover; border-radius:10px; margin-bottom:12px;'>"
        else:
            image_html = "<div style='height:220px; background-color:var(--bg-light); display:flex; align-items:center; justify-content:center; border-radius:10px; margin-bottom:12px; color:var(--text-muted);'>No Image Available</div>"

        formatted_price = f"PKR {price:,}" if price is not None else "Price N/A"

        # ADDED: Display contact info
        contact_info_html = ""
        if contact_name or contact_number:
            contact_info_html += "<p><strong>Contact:</strong> "
            if contact_name:
                contact_info_html += f"{contact_name}"
            if contact_name and contact_number:
                contact_info_html += " | "
            if contact_number:
                contact_info_html += f"<a href='tel:{contact_number}' style='color:var(--primary-blue); text-decoration:none;'>{contact_number}</a>"
            contact_info_html += "</p>"


        html_output += f"""
        <div class='property-card'>
            {image_html}
            <h3>{property_type} in {location}, {city}</h3>
            <p><strong>Purpose:</strong> {purpose}</p>
            <p><strong>Area:</strong> {area} {unit}</p>
            <p><strong>Bedrooms:</strong> {bedrooms} | <strong>Bathrooms:</strong> {baths}</p>
            <p class='price'><strong>Price:</strong> {formatted_price}</p>
            {contact_info_html} <p>{description or 'No description provided.'}</p>
            <small style='color:#909090;'>Listed on: {listed_at.split(' ')[0]}</small>
        </div>
        """
    html_output += "</div>"
    return html_output

# Helper functions for tab redirection
def go_to_price_prediction():
    return gr.Tabs.update(selected="Price Prediction")

def go_to_list_property():
    return gr.Tabs.update(selected="List Your Property")

def go_to_ai_chatbot():
    return gr.Tabs.update(selected="AI Chatbot")

def go_to_browse_properties():
    return gr.Tabs.update(selected="Browse Properties")


init_db()

# --- Custom CSS for a modern, beautiful, and dynamic look ---
custom_css = """
@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600;700&family=Poppins:wght@300;400;500;600;700&display=swap');
@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css');

:root {
    --bg-dark: #1A1A2E;
    --bg-medium: #16213E;
    --bg-light: #2E3A59;
    --text-light: #E0E0E0;
    --text-muted: #B0B0B0;
    --primary-blue: #007BFF;
    --primary-blue-dark: #0056b3;
    --gradient-start: #6a11cb;
    --gradient-end: #2575fc;
    --success-green: #28a745;
    --error-red: #DC3545;
    --border-color: #4A4A6B;
    --shadow-light: rgba(0, 0, 0, 0.15);
    --shadow-medium: rgba(0, 0, 0, 0.3);
    --shadow-heavy: rgba(0, 0, 0, 0.4);
}

body {
    font-family: 'Poppins', sans-serif;
    background-color: var(--bg-dark);
    color: var(--text-light);
    line-height: 1.6;
    overflow-x: hidden;
}

.gradio-container {
    box-shadow: 0 12px 35px var(--shadow-heavy);
    border-radius: 25px;
    overflow: hidden;
    background-color: var(--bg-medium);
    margin: 35px auto;
    max-width: 1280px;
    transition: all 0.3s ease-in-out;
}

h1, h2, h3 {
    font-family: 'Montserrat', sans-serif;
    text-align: center;
    margin-bottom: 35px;
    font-weight: 700;
    background-image: linear-gradient(to right, var(--gradient-start) 0%, var(--gradient-end) 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    color: transparent;
    text-shadow: 0 3px 10px var(--shadow-medium);
    letter-spacing: 0.08em;
}
h1 { font-size: 3.8em; margin-top: 30px; }
h2 { font-size: 2.8em; }
h3 { font-size: 2.0em; }

.home-hero-text {
    font-size: 1.3em;
    color: var(--text-muted);
    text-align: center;
    margin-bottom: 50px;
    max-width: 900px;
    margin-left: auto;
    margin-right: auto;
    line-height: 1.8;
}
.home-feature-title {
    font-family: 'Montserrat', sans-serif;
    font-size: 1.7em;
    font-weight: 600;
    color: var(--primary-blue);
    margin-top: 20px;
    margin-bottom: 15px;
    text-align: center;
}
.home-feature-description {
    color: var(--text-muted);
    font-size: 1.0em;
    text-align: center;
    margin-bottom: 25px;
    line-height: 1.7;
}

.gr-button {
    background-color: var(--primary-blue);
    color: white;
    border: none;
    border-radius: 15px;
    padding: 16px 35px;
    font-size: 19px;
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease;
    box-shadow: 0 8px 20px var(--shadow-light);
    font-weight: 600;
    margin-top: 15px;
}
.gr-button:hover {
    background-color: var(--primary-blue-dark);
    transform: translateY(-5px);
    box-shadow: 0 10px 30px var(--shadow-medium);
}
.gr-button.secondary {
    background-color: #6c757d;
}
.gr-button.secondary:hover {
    background-color: #545b62;
}

/* Styling for the interactive cards on the home page */
.home-card-container {
    position: relative;
    width: 100%;
    height: 100%;
}

/* Style the HTML content that looks like a card */
.property-card {
    border: 1px solid var(--border-color);
    border-radius: 20px;
    padding: 30px;
    background-color: var(--bg-medium);
    box-shadow: 0 8px 25px var(--shadow-light);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    height: 100%; /* Ensure the HTML div takes full height of its column */
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    cursor: pointer; /* Indicate it's clickable */
}

.property-card:hover {
    transform: translateY(-10px);
    box-shadow: 0 15px 35px var(--shadow-medium);
}

/* Make the actual Gradio Button invisible but still capture clicks */
.home-card-trigger-button {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0; /* Make it invisible */
    cursor: pointer;
    z-index: 10; /* Ensure it's above the HTML content to capture clicks */
    background: transparent;
    border: none;
    padding: 0;
}


/* Revert to more default Gradio styling for most inputs/outputs in other tabs,
    but keep some basic theming for readability with dark mode. */
.gr-dropdown, .gr-textbox, .gr-number, .gr-radio, .gr-file {
    border-radius: 8px; /* Slightly less rounded than home cards */
    border: 1px solid var(--border-color);
    background-color: var(--bg-light);
    color: var(--text-light);
    padding: 10px 15px;
    margin-bottom: 15px;
}
.gr-dropdown:focus, .gr-textbox:focus-within, .gr-number:focus-within, .gr-file:focus-within {
    border-color: var(--primary-blue);
    box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.25);
    outline: none;
}
.gr-textbox input::placeholder {
    color: #888888;
}

.gr-label {
    font-weight: 600;
    color: var(--text-light);
    margin-bottom: 8px;
    font-size: 1em;
}

.gr-tab-item {
    font-size: 1.2em;
    font-weight: 500;
    padding: 18px 30px;
    transition: all 0.3s ease;
    color: var(--text-muted);
    border-radius: 10px 10px 0 0;
}
.gr-tab-item.selected {
    color: var(--primary-blue) !important;
    border-bottom: 4px solid var(--primary-blue) !important;
    background-color: var(--bg-dark);
}
.gr-tab-item:hover {
    background-color: var(--bg-light);
}

/* Specific styling for the browse properties cards */
.property-card:not(.home-card-container) {
    border: 1px solid var(--border-color);
    border-radius: 15px;
    padding: 25px;
    margin-bottom: 25px;
    background-color: var(--bg-medium);
    box-shadow: 0 6px 20px var(--shadow-light);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}
.property-card:not(.home-card-container):hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 25px var(--shadow-medium);
}
.property-card h3 {
    margin-top: 0;
    font-size: 1.8em;
    background-image: linear-gradient(to right, var(--gradient-start) 0%, var(--gradient-end) 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    color: transparent;
    text-shadow: none;
    text-align: left;
    letter-spacing: 0.02em;
}
.property-card p {
    margin-bottom: 8px;
    color: var(--text-muted);
    line-height: 1.6;
}
.property-card .price {
    font-weight: bold;
    color: var(--success-green);
    font-size: 20px;
    margin-top: 15px;
}
.property-card img {
    border-radius: 8px;
    object-fit: cover;
    width: 100%;
    height: 200px;
    margin-bottom: 10px;
}

/* Chatbot specific styling */
.chatbot-container {
    border: 1px solid var(--border-color);
    border-radius: 15px;
    padding: 20px;
    background-color: var(--bg-medium);
    min-height: 400px;
    box-shadow: 0 6px 20px var(--shadow-light);
}

.gr-image img { /* General image styling, can be more specific if needed */
    border-radius: 8px;
    object-fit: cover;
    width: 100%;
    height: 250px;
    box-shadow: 0 4px 15px var(--shadow-light);
}
.property-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 25px;
    padding: 25px;
}

.gr-file {
    background-color: var(--bg-light);
    border: 2px dashed var(--border-color);
    border-radius: 10px;
    padding: 30px;
    text-align: center;
    color: var(--text-muted);
    transition: background-color 0.2s ease, border-color 0.2s ease;
    cursor: pointer;
    margin-bottom: 15px;
}
.gr-file:hover {
    background-color: #3a4a6b;
    border-color: var(--primary-blue);
}
.gr-file .gr-upload-icon {
    font-size: 3em;
    color: var(--primary-blue);
    margin-bottom: 15px;
}
.gr-file .gr-upload-text {
    font-size: 1em;
    font-weight: 500;
    color: var(--text-light);
}

.gr-message {
    border-radius: 20px;
    padding: 12px 18px;
    margin: 8px 0;
    max-width: 80%;
    word-wrap: break-word;
    font-size: 0.95em;
    box-shadow: 0 2px 8px rgba(0,0,0,0.2);
}
.gr-message.user {
    background-color: #007bff;
    color: white;
    align-self: flex-end;
    border-bottom-right-radius: 8px;
}
.gr-message.bot {
    background-color: var(--bg-light);
    color: var(--text-light);
    align-self: flex-start;
    border-bottom-left-radius: 8px;
}
.feedback-message {
    padding: 15px;
    border-radius: 10px;
    margin-bottom: 20px;
    text-align: center;
    font-weight: bold;
    font-size: 1.1em;
    box-shadow: 0 2px 10px rgba(0,0,0,0.3);
}
.feedback-message.success {
    background-color: var(--success-green);
    color: white;
}
.feedback-message.error {
    background-color: var(--error-red);
    color: white;
}

@keyframes fadeInContent {
    from {
        opacity: 0;
        transform: translateY(10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.gr-tab-content[style*="display: block"] {
    animation: fadeInContent 0.3s ease-out forwards;
}

@media (max-width: 768px) {
    h1 { font-size: 2.2em; margin-bottom: 15px;}
    h2 { font-size: 1.8em; margin-bottom: 15px;}
    h3 { font-size: 1.3em; }
    .gr-tab-item { padding: 12px 18px; font-size: 0.9em; }
    .gr-button { padding: 8px 18px; font-size: 0.8em; }
    .gradio-container { margin: 10px; border-radius: 15px; }
    .property-grid { grid-template-columns: 1fr; gap: 15px; padding: 15px; }
    .home-hero-text { font-size: 0.9em; margin-bottom: 20px;}
    .home-feature-title { font-size: 1.2em; }
    .home-feature-description { font-size: 0.85em; }
    .gr-image img { height: 150px; }
    .gr-file { padding: 20px; }
    .gr-file .gr-upload-icon { font-size: 2.2em; }
    .gr-file .gr-upload-text { font-size: 0.85em; }
    .property-card:not(.home-card-container) { padding: 15px; border-radius: 10px; }
    .property-card h3 { font-size: 1.5em; }
}

@media (max-width: 480px) {
    h1 { font-size: 1.8em; }
    h2 { font-size: 1.4em; }
    .gr-tab-item { padding: 10px 12px; font-size: 0.8em; }
    .gradio-container { margin: 8px; border-radius: 10px; }
    .gr-button { font-size: 0.75em; padding: 6px 12px;}
    .property-card h3 { font-size: 1.2em; }
    .property-card p { font-size: 0.8em; }
    .property-card .price { font-size: 1.1em; }
}
"""

# --- Main Gradio Application Blocks ---
with gr.Blocks(
    title="AI-Integrated Real Estate Web Platform",
    css=custom_css,
    theme=gr.themes.Default(), # Revert to a default theme, no 'mode' here
    mode="dark" # CORRECTED: Apply dark mode directly at the Blocks level
) as demo:

    gr.Markdown("# AI-Integrated Real Estate Web Platform")
    gr.Markdown("""
    <p class="home-hero-text">Your ultimate destination for property insights, listings, and intelligent assistance in Pakistan. Leveraging cutting-edge AI, we empower you to make informed decisions and navigate the real estate market with ease.</p>
    """)

    with gr.Tabs() as main_tabs:
        with gr.TabItem("Home"):
            gr.Markdown("## Explore Our Core Features")
            with gr.Row():
                with gr.Column(scale=1, min_width=320):
                    gr.HTML(
                        """
                        <div class="property-card home-card-container">
                            <i class="fas fa-chart-line upload-icon" style="font-size:3.5em; color:var(--primary-blue); margin-bottom:15px;"></i>
                            <p class="home-feature-title">AI Price Prediction</p>
                            <p class="home-feature-description">Get instant, accurate valuations for your property using our advanced machine learning model. Understand market trends.</p>
                        </div>
                        """
                    )
                    # Invisible button to trigger the tab change
                    gr.Button(
                        value="Go to Price Prediction",
                        elem_classes="home-card-trigger-button",
                        visible=True # Must be visible for click to register, but opacity 0 via CSS
                    ).click(
                        fn=go_to_price_prediction,
                        inputs=[],
                        outputs=main_tabs
                    )
                with gr.Column(scale=1, min_width=320):
                    gr.HTML(
                        """
                        <div class="property-card home-card-container">
                            <i class="fas fa-home upload-icon" style="font-size:3.5em; color:var(--primary-blue); margin-bottom:15px;"></i>
                            <p class="home-feature-title">Effortless Property Listing</p>
                            <p class="home-feature-description">List your property for sale or rent with ease. Reach a wide audience of potential buyers and renters.</p>
                        </div>
                        """
                    )
                    # Invisible button to trigger the tab change
                    gr.Button(
                        value="Go to List Your Property",
                        elem_classes="home-card-trigger-button",
                        visible=True
                    ).click(
                        fn=go_to_list_property,
                        inputs=[],
                        outputs=main_tabs
                    )
                with gr.Column(scale=1, min_width=320):
                    gr.HTML(
                        """
                        <div class="property-card home-card-container">
                            <i class="fas fa-comments upload-icon" style="font-size:3.5em; color:var(--primary-blue); margin-bottom:15px;"></i>
                            <p class="home-feature-title">Intelligent Chat Support</p>
                            <p class="home-feature-description">Get instant answers to your real estate questions, market insights, and personalized recommendations.</p>
                        </div>
                        """
                    )
                    # Invisible button to trigger the tab change
                    gr.Button(
                        value="Go to AI Chatbot",
                        elem_classes="home-card-trigger-button",
                        visible=True
                    ).click(
                        fn=go_to_ai_chatbot,
                        inputs=[],
                        outputs=main_tabs
                    )

            gr.Markdown("## Why Choose PropertEase?")
            gr.HTML("""
                <div style="display:flex; justify-content:space-around; flex-wrap:wrap; margin-top:25px;">
                    <div style="flex:1; min-width:280px; margin:20px; padding:25px; background-color:var(--bg-light); border-radius:18px; box-shadow:0 5px 20px var(--shadow-light); text-align:center; transition:transform 0.3s ease, box-shadow 0.3s ease;" onmouseover="this.style.transform='translateY(-8px)'; this.style.boxShadow='0 10px 30px var(--shadow-medium)';" onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 5px 20px var(--shadow-light)';">
                        <i class="fas fa-lightbulb" style="font-size:3em; color:var(--gradient-end); margin-bottom:20px;"></i>
                        <p style="font-family:'Montserrat', sans-serif; font-weight:600; font-size:1.2em; color:var(--text-light); margin-bottom:10px;">AI-Powered Insights</p>
                        <p style="color:var(--text-muted); font-size:0.95em;">Harness the power of machine learning for accurate price predictions and market analysis.</p>
                    </div>
                    <div style="flex:1; min-width:280px; margin:20px; padding:25px; background-color:var(--bg-light); border-radius:18px; box-shadow:0 5px 20px var(--shadow-light); text-align:center; transition:transform 0.3s ease, box-shadow 0.3s ease;" onmouseover="this.style.transform='translateY(-8px)'; this.style.boxShadow='0 10px 30px var(--shadow-medium)';" onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 5px 20px var(--shadow-light)';">
                        <i class="fas fa-lock" style="font-size:3em; color:var(--gradient-end); margin-bottom:20px;"></i>
                        <p style="font-family:'Montserrat', sans-serif; font-weight:600; font-size:1.2em; color:var(--text-light); margin-bottom:10px;">Secure & Reliable</p>
                        <p style="color:var(--text-muted); font-size:0.95em;">Your data and listings are handled with utmost care and security.</p>
                    </div>
                    <div style="flex:1; min-width:280px; margin:20px; padding:25px; background-color:var(--bg-light); border-radius:18px; box-shadow:0 5px 20px var(--shadow-light); text-align:center; transition:transform 0.3s ease, box-shadow 0.3s ease;" onmouseover="this.style.transform='translateY(-8px)'; this.style.boxShadow='0 10px 30px var(--shadow-medium)';" onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 5px 20px var(--shadow-light)';">
                        <i class="fas fa-user-friends" style="font-size:3em; color:var(--gradient-end); margin-bottom:20px;"></i>
                        <p style="font-family:'Montserrat', sans-serif; font-weight:600; font-size:1.2em; color:var(--text-light); margin-bottom:10px;">User-Friendly Interface</p>
                        <p style="color:var(--text-muted); font-size:0.95em;">An intuitive design makes navigating and interacting with the platform a breeze.</p>
                    </div>
                </div>
            """)

            with gr.Row():
                with gr.Column(scale=1, min_width=300):
                    gr.Button(
                        "Browse All Properties",
                        elem_classes="gr-button",
                        icon="https://img.icons8.com/ios-filled/50/ffffff/search.png"
                    ).click(
                        fn=go_to_browse_properties,
                        inputs=[],
                        outputs=main_tabs
                    )
                with gr.Column(scale=1, min_width=300):
                    gr.Button(
                        "Get Started with AI Prediction",
                        elem_classes="gr-button",
                        icon="https://img.icons8.com/ios-filled/50/ffffff/ai-robot.png"
                    ).click(
                        fn=go_to_price_prediction,
                        inputs=[],
                        outputs=main_tabs
                    )

        with gr.TabItem("Price Prediction"):
            gr.Markdown("## Pakistan Property Price Prediction")
            gr.Markdown("<p style='text-align:center; color:var(--text-muted);'>Predict the estimated market price of your property.</p>")
            with gr.Row():
                with gr.Column():
                    city_pred = gr.Dropdown(cities, label="City", value="Lahore", interactive=True)
                    location_pred = gr.Dropdown(locations["Lahore"], label="Location", value=locations["Lahore"][0], interactive=True)
                    province_pred = gr.Dropdown(provinces, label="Province", value="Punjab", interactive=True)
                    property_type_pred = gr.Dropdown(property_types, label="Property Type", value="House", interactive=True)
                with gr.Column():
                    purpose_pred = gr.Dropdown(purposes, label="Purpose", value="For Sale", interactive=True)
                    area_pred = gr.Number(label="Area", value=100)
                    unit_pred = gr.Radio(["SqFt", "Marla"], label="Area Unit", value="SqFt", interactive=True)
                    bedrooms_pred = gr.Slider(minimum=0, maximum=10, step=1, label="Number of Bedrooms", value=3, interactive=True)
                    baths_pred = gr.Slider(minimum=0, maximum=10, step=1, label="Number of Bathrooms", value=2, interactive=True)

            city_pred.change(update_locations, inputs=city_pred, outputs=location_pred)

            predict_btn = gr.Button("Predict Price", elem_classes="gr-button")
            prediction_output = gr.HTML(label="Predicted Price")

            predict_btn.click(
                predict_price,
                inputs=[city_pred, location_pred, province_pred, area_pred, unit_pred, bedrooms_pred, baths_pred, property_type_pred, purpose_pred],
                outputs=prediction_output
            )

            gr.Markdown("### Recent Predictions Report")
            gr.Button("Download Recent Predictions CSV", elem_classes="gr-button secondary").click(
                fn=download_report,
                inputs=[],
                outputs=gr.File(label="Download CSV")
            )

        with gr.TabItem("List Your Property"):
            gr.Markdown("## List Your Property for Sale or Rent")
            gr.Markdown("<p style='text-align:center; color:var(--text-muted);'>Fill out the details to add your property to our listings.</p>")
            with gr.Column():
                with gr.Row():
                    list_city = gr.Dropdown(cities, label="City", value="Lahore")
                    list_location = gr.Dropdown(locations["Lahore"], label="Location", value=locations["Lahore"][0])
                    list_province = gr.Dropdown(provinces, label="Province", value="Punjab")
                with gr.Row():
                    list_property_type = gr.Dropdown(property_types, label="Property Type", value="House")
                    list_purpose = gr.Dropdown(purposes, label="Purpose", value="For Sale")
                with gr.Row():
                    list_area = gr.Number(label="Area (e.g., 1000)", value=1000)
                    list_unit = gr.Radio(["SqFt", "Marla"], label="Area Unit", value="SqFt")
                    list_bedrooms = gr.Slider(minimum=0, maximum=10, step=1, label="Number of Bedrooms", value=3)
                    list_baths = gr.Slider(minimum=0, maximum=10, step=1, label="Number of Bathrooms", value=2)
                with gr.Row():
                    list_price = gr.Number(label="Asking Price (PKR)", value=10000000)
                with gr.Row():
                    list_contact_name = gr.Textbox(label="Your Name (for contact)")
                    list_contact_number = gr.Textbox(label="Your Contact Number (e.g., 03xx-xxxxxxx)")
                list_description = gr.Textbox(label="Description (optional)", lines=3)
                # IMPORTANT: For image upload on Hugging Face Spaces, type="filepath" is often best.
                # You'll then handle reading the file from the given path in your Python function.
                list_images = gr.File(label="Upload Property Images (Max 1 for now)", file_count="single", type="filepath", file_types=["image"])

            list_city.change(update_locations, inputs=list_city, outputs=list_location)

            submit_btn = gr.Button("List Property", elem_classes="gr-button")
            list_output = gr.HTML()

            submit_btn.click(
                submit_property_listing,
                inputs=[list_city, list_location, list_province, list_area, list_unit, list_bedrooms, list_baths, list_property_type, list_purpose, list_description, list_images, list_price, list_contact_name, list_contact_number],
                outputs=[list_output, list_city, list_location, list_province, list_area, list_unit, list_bedrooms, list_baths, list_property_type, list_purpose, list_description, list_images, list_price, list_contact_name, list_contact_number]
            )

        with gr.TabItem("Browse Properties"):
            gr.Markdown("## Browse Listed Properties")
            gr.Markdown("<p style='text-align:center; color:var(--text-muted);'>Explore properties listed by other users.</p>")
            all_properties_html = gr.HTML(load_all_properties_html())
            # Add a button to refresh listings
            refresh_properties_btn = gr.Button("Refresh Listings", elem_classes="gr-button secondary")
            refresh_properties_btn.click(load_all_properties_html, inputs=[], outputs=all_properties_html)


        with gr.TabItem("AI Chatbot"):
            gr.Markdown("## AI Real Estate Chatbot")
            gr.Markdown("<p style='text-align:center; color:var(--text-muted);'>Ask me anything about Pakistan real estate!</p>")
            chatbot = gr.ChatInterface(
                chatbot_response,
                chatbot=gr.Chatbot(height=400, elem_classes="chatbot-container"),
                textbox=gr.Textbox(placeholder="Ask your real estate question...", scale=7),
                # title="Real Estate Assistant",
                # description="Your AI guide for Pakistan property market."
            )

if __name__ == "__main__":
    demo.launch(share=True)